<style lang="less">
page {
  background-color: #f4f4f4;
}
.item {
  position: relative;
  display: flex;
  justify-content: space-between;
  width: 100%;
  box-sizing: border-box;
  line-height: 24px;
  align-items: center;
  &:after{
    content:' ';
    position:absolute;
    pointer-events:none;
    box-sizing:border-box;
    -webkit-transform-origin:center;
    transform-origin:center;
    top:auto;
    left:15px;
    right:0;
    bottom:0;
    -webkit-transform:scaleY(.5);
    transform:scaleY(.5);
    border-bottom:1px solid #eee;
  }
  // view {
  //   display: flex;
  //   justify-content: space-between;
  //   align-items: center;
  //   padding:10px 15px;
  //   text {
  //     font-size:14px;
  //     white-space: nowrap;
  //   }
  //   input {
  //     padding: 0 5px;
  //   }
  // }
}

.fix {
  position: fixed;
  width: 100%;
  bottom: 0;
  z-index: 99;
  button {
    border-radius: 0px;
  }
}
</style>
<template>
  <view style="padding-bottom: 50px">
    <van-cell-group>
      <van-field
        id="name"
        value="{{name}}"
        label="品牌名称"
        placeholder="请输入品牌名称"
        bind:change="onChange"
      />
      <van-field
        id="createUserName"
        value="{{createUserName}}"
        label="创始人名称"
        placeholder="请输入姓名"
        bind:change="onChange"
      />
      <van-field
        id="createUserPhone"
        label="手机号"
        placeholder="请输入手机号"
        bind:change="onChange"
      />
      <van-field
        id="createUserIdCard"
        label="身份证号"
        placeholder="请输入身份证号"
        bind:change="onChange"
      />
      <picker mode="date" value="{{createDate}}" bindchange="bindDateChange">
        <van-field
          value="{{createDate}}"
          label="创立日期"
          placeholder="请输入日期"
          readonly="{{ true }}"
        />  
      </picker>
      <picker mode="multiSelector" bindchange="bindMultiPickerChange" bindcolumnchange="bindMultiPickerColumnChange" range-key="name" value="{{multiIndex}}" range="{{listA}}">
        <van-field
          value="{{areaName}}"
          label="总部所在地"
          placeholder="请输入所在地"
          readonly="{{ true }}"
        />
      </picker>
      <van-field
        id="hqSocialNum"
        label="总部统一社会信用代码"
        placeholder="请输入总部统一社会信用代码"
        bind:change="onChange"
      />
    </van-cell-group>    
    <van-panel title="连锁规模" style="margin: 10px ">
      <view class="item">
        <van-field
          id="direStore"
          label="直营店"
          type="number"
          placeholder="0"
          bind:change="onChange"
          use-button-slot
        >
          <text slot="button">家</text>
        </van-field>
        <van-field
          id="joinStore"
          type="number"
          label="加盟店"
          placeholder="0"
          bind:change="onChange"
          use-button-slot
        >
          <text slot="button">家</text>
        </van-field>
      </view>
      <van-field
        id="representStore"
        label="代表门店"
        placeholder="请输入门店名称"
        bind:change="onChange"
      />
    </van-panel>  
    <van-cell-group>
      <interval start='场地面积' startValue="{{areaFrom}}" startId="areaFrom"  end="平方米" endId="areaTo" endValue="{{areaTo}}" bind:change='onChildChange' />
      <interval start='客单价区间' startId="priceFrom" startValue="{{priceFrom}}" end="元" endId="priceTo" endValue="{{priceTo}}" bind:change='onChildChange' />
      <interval start='单店投资额' startId="investmentFrom" startValue="{{investmentFrom}}" end="万元" endId="investmentTo" endValue="{{investmentTo}}" bind:change='onChildChange' />
      <interval start='月净利润' startId="monthProfileFrom" startValue="{{monthProfileFrom}}" end="万元" endId="monthProfileTo" endValue="{{monthProfileTo}}" bind:change='onChildChange'/>
      <interval start='年化投资回报率' startId="yearProfileFrom" startValue="{{yearProfileFrom}}" end="%" endId="yearProfileTo" endValue="{{yearProfileTo}}" bind:change='onChildChange'/>
      <interval start='回本周期' startId="backWeekFrom" startValue="{{backWeekFrom}}" end="个月" endId="backWeekTo" endValue="{{backWeekTo}}" bind:change='onChildChange'/>
      <interval start='项目失败率' startId="failureRateFrom" startValue="{{failureRateFrom}}" end="%" endId="failureRateTo" endValue="{{failureRateTo}}" bind:change='onChildChange'/>
    </van-cell-group>  
    <view class="fix">
      <button type="warn" @tap="toNext">下一步</button>
    </view>
  </view>
</template>
<script>
import wepy from 'wepy'
import api from '../../api/api'
import utils from '../../utils/utils'
import moment from 'moment'
// import Interval from '../../components/interval'

export default class Brand extends wepy.page {
  config = {
    navigationBarTitleText: '品牌概况',
    usingComponents: {
      'van-cell': '../../components/van/cell/index',
      'van-cell-group': '../../components/van/cell-group/index',
      'van-field': '../../components/van/field/index',
      'van-panel': '../../components/van/panel/index',
      'interval': '../../components/interval/index'
    }
  }

  data = {
    name: '',
    createUserName: '',
    createUserPhone: '',
    createUserIdCard: '',
    createDate: '',
    areaName: '',
    areaCode: '',
    hqSocialNum: '',
    direStore: '',
    joinStore: '',
    representStore: '',
    areaFrom: '',
    areaTo: '',
    priceFrom: '',
    priceTo: '',
    investmentFrom: '', 
    investmentTo: '',
    monthProfileFrom: '', 
    monthProfileTo: '', 
    yearProfileFrom: '', 
    yearProfileTo: '', 
    backWeekFrom: '',
    backWeekTo: '',
    failureRateFrom: '',
    failureRateTo: '',
    listA: [[],[]],
    multiIndex: [0, 0],
  }

  methods = {
    onChange(e) {
      console.log('parent', e)
      this[e.target.id] = e.detail
      console.log(this)
      this.$apply()
    },
    onChildChange(e) {
      const { detail } = e
      this[detail.target.id] = detail.detail.value
      this.$apply()
    },
    bindDateChange(e) {
      console.log(e)
      this.createDate = e.detail.value
      this.$apply()
    },
    bindRegionChange(e) {
      this.areaName = e.detail.value.join(' ')
      this.$apply()
    },
    bindMultiPickerChange(e) {
      this.areaCode = this.listA[2][e.detail.value[2]].areaCode
      this.areaName = `${this.listA[0][e.detail.value[0]].name} ${this.listA[1][e.detail.value[1]].name} ${this.listA[2][e.detail.value[2]].name}`
      this.multiIndex = e.detail.value
      this.$apply()
    },
    bindMultiPickerColumnChange: function (e) {
      if (e.detail.column == 0) {
        this.changeB(this.listA[0][e.detail.value].id)
      } else if (e.detail.column == 1) {
        this.getCityC(this.listA[1][e.detail.value].id)
      }
    },
  }

  async toNext() {
    if (!this.name) {
      utils.alert('请输入品牌名称')
      return
    }
    if (!this.createUserName) {
      utils.alert('请输入创始人姓名')
      return
    }
    if (!this.createUserPhone) {
      utils.alert('请输入创始人手机号')
      return
    }
    if (!this.createUserIdCard) {
      utils.alert('请输入创始人身份证')
      return
    }
    if (!this.createDate) {
      utils.alert('请选择创立日期')
      return
    }
    if (!this.areaName) {
      utils.alert('请选择总部所在地')
      return
    }
    if (!this.hqSocialNum) {
      utils.alert('请输入总部统一社会信用代码')
      return
    }
    if (!this.direStore) {
      utils.alert('请输入品牌直营店数量')
      return
    }
    if (!this.joinStore) {
      utils.alert('请输入品牌加盟店数量')
      return
    }
    if (!this.representStore) {
      utils.alert('请输入品牌代表门店名称')
      return
    }
    if (!this.areaFrom || !this.areaTo) {
      utils.alert('请输入品牌所属店面的场地面积')
      return
    }
    if (!this.priceFrom || !this.priceTo) {
      utils.alert('请输入品牌所属店面的客单价区间')
      return
    }
    if (!this.investmentFrom || !this.investmentTo) {
      utils.alert('请输入品牌所属店面的单店投资额')
      return
    }
    if (!this.monthProfileFrom || !this.monthProfileTo) {
      utils.alert('请输入品牌所属店面的月净利润')
      return
    }
    if (!this.yearProfileFrom || !this.yearProfileTo) {
      utils.alert('请输入品牌所属店面的年化投资回报率')
      return
    }
    if (!this.backWeekFrom || !this.backWeekTo) {
      utils.alert('请输入品牌所属店面的回本周期')
      return
    }
    if (!this.failureRateFrom || !this.failureRateTo) {
      utils.alert('请输入品牌所属店面的项目失败率')
      return
    }
    
    // if (Object.values(this.data).some(k => k == '')) {
    //   utils.alert('有未填写的项目')
    //   return
    // }
    delete this.data.listA; 
    delete this.data.multiIndex; 
    try {
      const json = await api.saveBrandStart({
        method: 'FORM',
        query: {
          projectId: wx.getStorageSync('pId'),
          ...this.data,
          createDate: moment(this.createDate).valueOf(),
          failureRate: 1,
          // chainFlag:  wx.getStorageSync('chainFlag'),
        }
      })
      if (json.data.code === 'success') {
        wx.navigateTo({ url: wx.getStorageSync('industryType') != '1' ? 'project' : 'brandabout' })
      } else {
        utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      utils.alert('系统异常')
    }
    this.$apply()
  }

  changeB(id) {
    this.getCityB(id)
  }

  async getCity() {
    try {
      const json = await api.loadAllParentArea()
      if (json.data.code === 'success') {
        this.listA[0] = json.data.data
        if (json.data.data.length > 0) {
          this.getCityB(json.data.data[0].id)
        }
        this.$apply()
      } else {
        utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      utils.alert('系统异常')
    }
  }

  async getCityB(id) {
    try {
      const json = await api.loadAllChildrenAreaByParentId({
        method: 'GET',
          query: {parentId: id}
      })
      if (json.data.code === 'success') {
        this.listA[1] = json.data.data
        this.getCityC(json.data.data[0].id)
        console.log(this.listA)
        this.$apply()
      } else {
        utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      utils.alert('系统异常')
    }
  }

  async getCityC(id) {
    try {
      const json = await api.loadAllChildrenAreaByParentId({
        method: 'GET',
          query: {parentId: id}
      })
      if (json.data.code === 'success') {
        this.listA[2] = json.data.data
        this.$apply()
      } else {
        utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      utils.alert('系统异常')
    }
  }

  async getInfo(id) {
    try {
      const json = await api.loadBrandByProjectId({
        method: 'GET',
        query: {
          projectId: wx.getStorageSync('pId')
        }
      })
      if (json.data.code == 'success') {
        const i = json.data.data
        this.name = i.name
        this.createUserName = i.createUserName
        this.createUserPhone = i.createUserPhone
        this.createUserIdCard = i.createUserIdCard
        this.createDate = i.createDate
        this.direStore = i.brandReference.direStore
        this.joinStore = i.brandReference.joinStore
        this.representStore = i.brandReference.representStore
        this.areaFrom = i.brandReference.areaFrom
        this.areaTo = i.brandReference.areaTo
        this.priceFrom = i.brandReference.priceFrom
        this.priceTo = i.brandReference.priceTo
        this.investmentFrom = i.brandReference.investmentFrom
        this.investmentTo = i.brandReference.investmentTo
        this.monthProfileFrom = i.brandReference.monthProfileFrom
        this.monthProfileTo = i.brandReference.monthProfileTo 
        this.yearProfileFrom = i.brandReference.yearProfileFrom 
        this.yearProfileTo = i.brandReference.yearProfileTo 
        this.backWeekFrom = i.brandReference.backWeekFrom
        this.backWeekTo = i.brandReference.backWeekTo
        this.$apply()
      } else {
        // utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      console.log(e)
      utils.alert('系统异常')
    }
  }

  
  onShow() {
    this.getCity()
    this.getInfo()
  }
}
</script>
