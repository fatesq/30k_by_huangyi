<style lang="less">
page {
  background-color: #f4f4f4;
}
.title {
  padding: 10px 15px;
  display: flex;
  align-items: center;
  image {
    width: 110rpx;
    height: 100rpx;
    border-radius: 50%;
    background-color: #CCC;
  }
}
.panel-box {
  margin-bottom: 20rpx;
  .item {
    padding: 10px 15px;
    border-bottom: 1px solid #f4f4f4;
  }
  .add {
    display: flex;
    justify-content: center;
    align-items: Center;
    color: #bbb;
  }
}
.fix {
  position: fixed;
  width: 100%;
  bottom: 0;
  z-index: 99;
  button {
    border-radius: 0px;
  }
}
</style>
<template>
<view>
<view wx:if="{{!showMember && !showExp}}" style="padding-bottom: 70px">
  <van-cell-group custom-class="panel-box">
    <van-field
      id="name"
      value="{{name}}"
      label="企业名称"
      placeholder="请输入企业名称"
      bind:change="onChange"
    />
  </van-cell-group>
  <van-panel custom-class="panel-box" title="核心团队">
    <view wx:for="{{memberList}}" wx:key="index">
      <view class="title">
        <image src="{{item.imageURL}}" mode="aspectFill"/>
        <van-cell title="{{item.name}}" style="width: 100%" border="{{false}}">
          <van-icon
            slot="right-icon"
            name="delete"
            class="van-cell__right-icon"
            bindtap="delete({{index}})"
          />
        </van-cell>
      </view>
      <view class="title">{{item.profile}}</view>
      <van-cell-group>
        <van-field value="{{item.mobileNumber}}" label="手机号" readonly/>
        <van-field value="{{item.identNumber}}" label="身份证号" readonly/>
        <van-field value="{{array[item.education]}}" label="学历学位" readonly/>
        <van-field value="{{array2[item.marriage]}}" label="婚姻状况" readonly/>
      </van-cell-group>
    </view>
    <view class="item add" @tap="show('showMember')">
      <van-icon name="add-o" custom-style="display: block;margin-right: 10px"/> 添加成员
    </view>
  </van-panel>

  <van-panel custom-class="panel-box" title="团队经验">
    <view>
      <van-swipe-cell right-width="{{ 65 }}" wx:for="{{memberList}}" wx:key="index" wx:if="{{item.experience}}" async-close bind:close="closeSwiper({{index}},memberList)">
        <view class="item">
          {{item.name}} 曾经营同类项目 {{item.experience}} 例
        </view>
        <view slot="right">删除</view>
      </van-swipe-cell>
    </view>
    <view class="item add" @tap="show('showExp')">
      <van-icon name="add-o" custom-style="display: block;margin-right: 10px"/> 添加团队经验
    </view>
  </van-panel>
  <van-cell-group custom-class="panel-box">
    <van-cell title="团队能力评分">
      <van-stepper
        id="score"
        value="{{ score }}"
        integer
        min="0"
        max="5"
        step="1"
        bind:change="onChange"
      />
    </van-cell>
  </van-cell-group>

  <van-panel custom-class="panel-box" title="投资人条件">
    <van-cell-group>
      <van-switch-cell
        id="checked"
        title="籍贯"
        checked="{{ checked }}"
        bind:change="onChange"
      />
      <picker mode="multiSelector" wx:if="{{checked}}" bindchange="bindMultiPickerChange1" bindcolumnchange="bindMultiPickerColumnChange1" range-key="name" value="{{multiIndex1}}" range="{{listA}}">
        <van-cell title="请输入籍贯" value="{{nativePlace}}" is-link/>
      </picker>
      <van-switch-cell
        id="checked2"
        title="常驻地"
        checked="{{ checked2 }}"
        bind:change="onChange"
      />
      <picker mode="multiSelector" wx:if="{{checked2}}" bindchange="bindMultiPickerChange" bindcolumnchange="bindMultiPickerColumnChange" range-key="name" value="{{multiIndex}}" range="{{listA}}">
        <van-cell title="请输入常驻地" value="{{address}}" is-link/>
      </picker>
      <van-switch-cell
        id="invitationFlag"
        title="邀请参与"
        checked="{{ invitationFlag }}"
        bind:change="onChange"
      />
    </van-cell-group>
  </van-panel>  

  <van-cell-group>
    <van-field
      id="teamHoldCount"
      value="{{teamHoldCount}}"
      label="经营团队持股"
      placeholder="请输入经营团队持股"
      type="digit"
      bind:change="onChange"
      use-button-slot
    >
      <text slot="button">%</text>
    </van-field>
    <van-field
      id="employeeCount"
      value="{{employeeCount}}"
      label="预计员工数"
      type="digit"
      placeholder="请输入员工数"
      bind:change="onChange"
      use-button-slot
    >
      <text slot="button">位</text>
    </van-field>
    <van-field
      id="area"
      value="{{area}}"
      label="场地面积"
      type="digit"
      placeholder="请输入场地面积"
      bind:change="onChange"
      use-button-slot
    >
      <text slot="button">平方米</text>
    </van-field>
  </van-cell-group>

  <view class="fix">
    <button type="warn" @tap="toNext">下一步</button>
  </view>
</view>
<Member wx:if="{{showMember}}"/>
<Exp wx:if="{{showExp}}" :list.sync="memberList" />
</view>
</template>
<script>
import wepy from 'wepy'
import api from '../../api/api'
import utils from '../../utils/utils'
import member from '../../components/group/member'
import exp from '../../components/group/exp'

export default class Project extends wepy.page {
  config = {
    navigationBarTitleText: '项目组织情况',
    usingComponents: {
      'van-icon': '../../components/van/icon/index',
      'van-cell': '../../components/van/cell/index',
      'van-cell-group': '../../components/van/cell-group/index',
      'van-field': '../../components/van/field/index',
      'van-panel': '../../components/van/panel/index',
      'van-switch-cell': '../../components/van/switch-cell/index',
      'van-stepper': '../../components/van/stepper/index'
    }
  }

  components = {
    Member: member,
    Exp: exp
  }

  data = {
    listA: [[],[]],
    multiIndex: [0, 0],
    multiIndex1: [0, 0],
    array: ['大学本科', '大学硕士', '大学博士', '大学专科', '普通高中', '初中及以下', '其他中等教育经历'],
    array2: ['初婚', '未婚', '复婚', '再婚', '离异', '丧偶'],
    showMember: false,
    showExp: false,
    memberList: [],
    expList: [],
    name: '',
    score: 0,
    invitationFlag: true,
    teamHoldCount: '',
    employeeCount: '',
    area: '',
    areaList: [],
    index: '',
    index2: '',
    checked: true,
    checked2: true,
    address: '',
    addressAreaCode: '',
    nativePlaceAreaCode: '',
    nativePlace: '',
  }

  methods = {
    closeSwiper(index,name,event) {
      console.log(index,name,event);
      const { position, instance } = event.detail;
      switch (position) {
        case 'right':
          // this[name].splice(index,1)
          this[name][index].experience = ""
          instance.close();
          break;
      }
    },
    bindMultiPickerChange(e) {
      this.addressAreaCode = this.listA[2][e.detail.value[2]].areaCode
      this.address = `${this.listA[0][e.detail.value[0]].name} ${this.listA[1][e.detail.value[1]].name} ${this.listA[2][e.detail.value[2]].name}`
      this.multiIndex = e.detail.value
      this.$apply()
    },
    bindMultiPickerColumnChange: function (e) {
      if (e.detail.column == 0) {
        this.changeB(this.listA[0][e.detail.value].id)
      }  else if (e.detail.column == 1) {
        this.getCityC(this.listA[1][e.detail.value].id)
      }
    },
    bindMultiPickerChange1(e) {
      this.nativePlaceAreaCode = this.listA[2][e.detail.value[2]].areaCode
      this.nativePlace = `${this.listA[0][e.detail.value[0]].name} ${this.listA[1][e.detail.value[1]].name} ${this.listA[2][e.detail.value[2]].name}`
      this.multiIndex1 = e.detail.value
      this.$apply()
    },
    bindMultiPickerColumnChange1: function (e) {
      if (e.detail.column == 0) {
        this.changeB(this.listA[0][e.detail.value].id)
      } else if (e.detail.column == 1) {
        this.getCityC(this.listA[1][e.detail.value].id)
      }
    },
    onChange(e) {
      console.log(e)
      this[e.target.id] = e.detail
      this.$apply();
    },
    bindPickerChange(e) {
      this[e.target.id] = e.detail.value
      console.log(e)
      this.$apply()
    },
    show(type) {
      this[type] = true
      this.$apply()
    },
    delete(index) {
      this.memberList.splice(index,1)
      this.$apply()
      console.log(index)
    },
    async toNext() {
      if (!this.name) {
        utils.alert('请输入企业名称')
        return
      }
      if (this.memberList.length < 1) {
        utils.alert('请添加团队核心成员')
        return
      }
      if (!this.teamHoldCount) {
        utils.alert('请输入经营团队持股')
        return
      }
      if (!this.employeeCount) {
        utils.alert('请输入预计员工数')
        return
      }
      if (!this.area) {
        utils.alert('请输入场地面积')
        return
      }
      if (this.memberList.every(i => i.isRepresentative == 0)) {
        this.memberList[0].isRepresentative = 1
      }
      try {
        const EEMember = this.memberList.map(e => {
            e.education = e.education + 1
            e.marriage = e.marriage + 1
            return e
        })
        const json = await api.createEEAndMember({
          method: 'FORM',
          query: {
            name: this.name,
            creditCode: wx.getStorageSync('enterpriseSocialNum'), 
            EEMember: JSON.stringify(EEMember),
            industry: wx.getStorageSync('belongIndustry')
          }
        })
        const json2 = await api.organization({
          method: 'FORM',
          query: {
            projectId: wx.getStorageSync('pId'),
            nativePlace: this.nativePlace ? this.nativePlace : '' ,
            nativePlaceAreaCode: this.nativePlaceAreaCode,
            address: this.address ? this.address : '' ,
            addressAreaCode : this.addressAreaCode,
            invitationFlag: this.invitationFlag ? 0 : 1,
            teamHoldCount: this.teamHoldCount,
            employeeCount: this.employeeCount,
            area: this.area,
            score: this.score  
          }
        })
        if (json.data.code === 'success' && json2.data.code === 'success') {
         
          wx.navigateTo({ url: 'draw' })
        } else {
          utils.alert('请完善信息')
          // utils.alert(json.data.msg || json.data.description)
        }
      } catch (e) {
        console.log(e)
        utils.alert('系统异常')
      }
    }  
  }

  events = {
    cancelAll() {
      this.showExp = false
      this.showMember = false
      this.$apply()
    },
    saveMember(value) {
      console.log(this.memberList, value)
      this.memberList.push(value)
      console.log(this.memberList)
      this.showMember = false
      this.$apply()
    },
    saveExp(list) {
      console.log(list)
      this.memberList = list
      this.showExp = false
      this.$apply()
    }
  }

  changeB(id) {
    this.getCityB(id)
  }

  async getCity() {
    try {
      const json = await api.loadAllParentArea()
      if (json.data.code === 'success') {
        this.listA[0] = json.data.data
        if (json.data.data.length > 0) {
          this.getCityB(json.data.data[0].id)
        }
        this.$apply()
      } else {
        utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      utils.alert('系统异常')
    }
  }

  async getCityB(id) {
    try {
      const json = await api.loadAllChildrenAreaByParentId({
        method: 'GET',
          query: {parentId: id}
      })
      if (json.data.code === 'success') {
        this.listA[1] = json.data.data
        this.getCityC(json.data.data[0].id)
        this.$apply()
      } else {
        utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      utils.alert('系统异常')
    }
  }

  async getCityC(id) {
    try {
      const json = await api.loadAllChildrenAreaByParentId({
        method: 'GET',
          query: {parentId: id}
      })
      if (json.data.code === 'success') {
        this.listA[2] = json.data.data
        console.log(this.listA)
        this.$apply()
      } else {
        utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      utils.alert('系统异常')
    }
  }

  async getInfo(id) {
    try {
      const json = await api.loadProjectOrganizationByProjectId({
        method: 'GET',
        query: {
          projectId: wx.getStorageSync('pId')
        }
      })
        console.log(json)
      if (json.data.code == 'success') {
        const i = json.data.data
        if (!i.nativePlace) this.checked = false;
        if (!i.address) this.checked2 = false;
        if (i.employeeCount) {
          this.nativePlace = i.nativePlace
          this.address = i.address
          this.invitationFlag = i.invitationFlag == 0 ? true : false
          this.teamHoldCount = i.teamHoldCount
          this.employeeCount = i.employeeCount
          this.area = i.area
          this.score = i.score ? i.score.teamScore : 0
          this.member(i.enterpriseSocialNum)
          this.$apply()
        }
      } else {
        // utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      console.log(e)
      utils.alert('系统异常')
    }
  }

  async member(id) {
    try {
      const json = await api.selectEE({
        method: 'FORM',
        query: {
          creditCode: id
        }
      })
      const json1 = await api.selectEEMemberByCCode({
        method: 'FORM',
        query: {
          creditCode: id
        }
      })
      if (json.data.code == 'success') {
        if (json.data.data.name) {
          this.name = json.data.data.name
          this.memberList = json1.data.data.map(i => {
            i.marriage = i.marriage - 1;
            i.education = i.education - 1;
            return i
          })
        }
        this.$apply()
      } else {
        utils.alert(json.data.msg || json.data.description)
      }
    } catch (e) {
      console.log(e)
      utils.alert('系统异常')
    }
  }

  
  onLoad() {
    this.getCity()
    this.getInfo()
  }
}
</script>
